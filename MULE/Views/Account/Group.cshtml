@using MULE.Models
@model group

@{
    ViewBag.Title = "Group";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@using (Html.BeginForm("Group", "Account", new { ReturnUrl = ViewBag.ReturnUrl }, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
{
    <h2>@Html.DisplayFor(m => m.group_name)</h2>
    @Html.HiddenFor(m => m.group_id)
    @Html.HiddenFor(m => m.group_name)
    @Html.HiddenFor(m => m.description)
    <div class="row">
        <div class="col-md-12">
            <section id="groupsForm">
                    <h4>@Html.DisplayFor(m => m.description)</h4>
                    <hr />
            </section>
        </div>
    </div>


    UserManager UM = new UserManager();
    GroupManager GM = new GroupManager();

    int u_id = UM.getUserId(User.Identity.Name);
    int g_id = Model.group_id;
    bool isMember = GM.checkMembership(u_id, g_id);
    bool isOwner = GM.checkOwnership(u_id, g_id);
    bool isActive = GM.checkActive(u_id, g_id);

        @:<div class="row">
            @:<div class="col-md-12">
                @:<p>
                    if (isMember && !isOwner)
                    {
                        <input type="submit" name="groupBut" value="Leave Group" style="display: inline;" class="btn btn-default" />
                    }
                    else if (isMember && isOwner)
                    {
                        <input type="submit" name="groupBut" value="Manage Group" style="display: inline;" class="btn btn-default" />
                    }
                    else
                    {
                        <input type="submit" name="groupBut" value="Join Group" style="display: inline;" class="btn btn-default" />
                    }

                @:</p>

                @:<p>
                    if(isMember && !isActive)
                    {
                        @:This group's posts will be displayed once the owner has approved your request to join.
                    }
                @:</p>

            @:</div>
        @:</div>


    if (isMember && isActive)
    {
        using (muleEntities db = new muleEntities())
        {

            var newPosts =
            (from p in db.posts
             join g in db.groups on p.group_id equals g.group_id
             join u in db.users on p.user_id equals u.user_id
             join s in db.sensors on p.post_id equals s.post_id
             join l in db.positionings on p.post_id equals l.post_id
             join ug in db.user_group on new { p.group_id } equals new { ug.group_id }
             where ug.is_approved.Equals(1) && ug.user_id == u_id && p.group_id == g_id
             select new
             {
                 p.post_id,
                 p.user_id,
                 g.group_name,
                 u.first_name,
                 u.last_name,
                 p.post_date,
                 p.post_status,
                 s.avg_primary_data,
                 s.sd,
                 s.sem,
                 s.meta_data,
                 l.northing,
                 l.easting,
                 l.euv_depth
             }).OrderByDescending(x => x.post_date).ToList();

            foreach (var u in newPosts)
            {
                @Html.Hidden("post_id", u.post_id)
                @:<div class="row">
                @:<div class="col-md-12">
                    @:<div class="card">
                        @:<h3>
                            @u.first_name @: @u.last_name
                        @:</h3>
                        @:<h4>
                            @:At Northing: @u.northing, Easting: @u.easting, Depth: @u.euv_depth M (@u.post_date)
                        @:</h4>
                        @:<p>
                            @u.post_status
                        @:</p>
                        @:<div style="border: thin solid black; margin:10px;">
                            @:<p style="margin:10px">
                                @u.avg_primary_data @: @u.meta_data
                                @:<br />(SD: @u.sd, SEM: @u.sem)
                            @:</p>
                        @:</div>
                        @:<p>
                                @Html.ActionLink("Discuss", "Search", "Account")
                        @:</p>
                     @:</div>
                 @:</div>
                 @:</div>
            }

            if (newPosts.Count() == 0)
            {
                @:<div class="row">
                @:<div class="col-md-12">
                    @:<div class="card">
                        @:<h3>
                            @:This group hasn't made any posts.
                        @:</h3>
                                @:<p>
                                    @Html.ActionLink("Find new groups here", "Search", "Account")
                                @:</p>
                     @:</div>
                 @:</div>
                 @:</div>
            }
        }
    }

}
